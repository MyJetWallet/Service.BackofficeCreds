@page "/users"

@using Service.BackofficeCreds.Blazor.Engines
@using Service.BackofficeCreds.Domain.Models

@inject BoCredManagerEngine _credManagerEngine

<ul class="nav">
    <li><button type="button" class="btn-outline-secondary btn" @onclick="CreateUser">Create user</button></li>
</ul>

<table class="table">
    <thead>
        <tr>
            <th>Email</th>
            <th>Phone</th>
            <th>Telegram</th>
            <th>Roles</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var userWithRole in _usersWithRoles)
        {
            <tr>
                <td>@userWithRole.User.Email</td>
                <td>@userWithRole.User.Phone</td>
                <td>@userWithRole.User.Telegram</td>
                <td>
                    @foreach (var role in userWithRole.Roles)
                    {
                        <span style="background: lightblue; margin-left: 5px; border-radius: 5px"><span style="margin: 5px">@role.Name</span></span>
                    }
                </td>
                <td>
                    <ul class="nav">
                        <li><button type="button" class="btn btn-info" @onclick="@(() => { ChangeRoles(userWithRole); })">Change Roles</button></li>
                    </ul>
                </td>
                <td>
                    <ul class="nav">
                        <li><button type="button" class="btn btn-danger" @onclick="@(async () => { await RemoveUser(userWithRole.User); })">Remove</button></li>
                    </ul>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (_changeRolesWindowOpen)
{
    <div>
        <BaseTwoButtonsDialog
            Caption=@GetChangeRolesDialogCaption()
            OnClose="CancelChangeRoles"
            YesButtonCaption="Save"
            NoButtonCaption="Cancel"
            OnSubmit="SubmitChangeRoles">
            <table class="table">
                <thead>
                    <tr>
                        <th>Role</th>
                        <th>Is Supervisor</th>
                        <th>Chosen</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var chosenRole in _chosenRoles)
                {
                    <tr>
                        <td>@chosenRole.Role.Name</td>
                        <td>@chosenRole.Role.IsSupervisor</td>
                        <td>
                            <ul class="nav">
                                <li>
                                    <input type="checkbox" style="width: 40px" @bind="chosenRole.Chosen"/>
                                </li>
                            </ul>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </BaseTwoButtonsDialog>
    </div>
}

@if (_createUserWindowOpen)
{
    <div>
        <BaseTwoButtonsDialog
            Caption="Create new user"
            OnClose="CancelCreateUser"
            YesButtonCaption="Save"
            NoButtonCaption="Cancel"
            OnSubmit="SubmitCreateUser">
            <ul class="nav">
                <li><span style="margin-left: 10px; vertical-align: center">Email : </span><input type="text" style="width: auto" @bind="_newUserEmail"/></li>
            </ul>
        </BaseTwoButtonsDialog>
    </div>
}

@code {
    private List<UserWithRole> _usersWithRoles = new();
    private List<Role> _roles = new();

    private bool _changeRolesWindowOpen = false;
    private UserWithRole _changeRoleUserTarget = new();
    private readonly List<ChosenRole> _chosenRoles = new();
    
    private bool _createUserWindowOpen = false;
    private string _newUserEmail = string.Empty;

    protected override void OnInitialized()
    {
        RefreshData().GetAwaiter().GetResult();
        base.OnInitialized();
    }

    private async Task RefreshData()
    {
        _usersWithRoles = await _credManagerEngine.GetUsersWithRolesAsync();
        _roles = await _credManagerEngine.GetRoles();
        StateHasChanged();
    }

    private async Task RemoveUser(User user)
    {
        await _credManagerEngine.RemoveUserAsync(user.Email);
        await RefreshData();
    }

    private void ChangeRoles(UserWithRole userWithRole)
    {
        _changeRolesWindowOpen = true;
        _changeRoleUserTarget = userWithRole;
        _chosenRoles.AddRange(_roles.Select(e => new ChosenRole()
        {
            Role = e,
            Chosen = _changeRoleUserTarget.Roles.Any(x => x.Name == e.Name)
        }));
        StateHasChanged();
    }

    private void CancelChangeRoles()
    {
        _changeRolesWindowOpen = false;
        _changeRoleUserTarget = new UserWithRole();
        _chosenRoles.Clear();
        StateHasChanged();
    }

    private async Task SubmitChangeRoles()
    {
        _changeRolesWindowOpen = false;
        StateHasChanged();
        
        await _credManagerEngine.SetupRolesAsync(_changeRoleUserTarget.User.Email, 
            _chosenRoles.Where(e => e.Chosen).Select(e => e.Role.Name).ToList());
        await RefreshData();
        CancelChangeRoles();
    }

    private string GetChangeRolesDialogCaption()
    {
        return "Choose roles for " + _changeRoleUserTarget.User.Email;
    }

    private class ChosenRole
    {
        public Role Role { get; set; }
        public bool Chosen { get; set; }
    }
    
    private void CreateUser()
    {
        _createUserWindowOpen = true;
        _newUserEmail = string.Empty;
        
        StateHasChanged();
    }

    private void CancelCreateUser()
    {
        _createUserWindowOpen = false;
        _newUserEmail = string.Empty;
        
        StateHasChanged();
    }

    private async Task SubmitCreateUser()
    {
        _createUserWindowOpen = false;
        StateHasChanged();

        await _credManagerEngine.CreateUserAsync(_newUserEmail);
        await RefreshData();
        CancelCreateUser();
    }
}