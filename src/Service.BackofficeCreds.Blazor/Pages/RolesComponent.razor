@page "/roles"

@using Service.BackofficeCreds.Blazor.Engines
@using Service.BackofficeCreds.Domain.Models

@inject BoCredManagerEngine _credManagerEngine

<ul class="nav">
    <li><button type="button" class="btn-outline-secondary btn" @onclick="CreateRole">Create role</button></li>
</ul>

<table class="table">
    <thead>
        <tr>
            <th>Role Id</th>
            <th>Name</th>
            <th>Is Supervisor</th>
            <th>Rights</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var roleWithRights in _roles)
        {
            <tr>
                <td>@roleWithRights.Role.Id</td>
                <td>@roleWithRights.Role.Name</td>
                <td>@roleWithRights.Role.IsSupervisor</td>
                <td>
                    @foreach (var right in roleWithRights.Rights)
                    {
                        <span style="background: lightblue; margin-left: 5px; border-radius: 5px"><span style="margin: 5px">@right.Name</span></span>
                    }
                </td>
                <td>
                    <ul class="nav">
                        <li><button type="button" class="btn btn-info" @onclick="@(() => { ChangeRights(roleWithRights); })">Change Rights</button></li>
                    </ul>
                </td>
                <td>
                    <ul class="nav">
                        <li><button type="button" class="btn btn-danger" @onclick="@(async () => { await RemoveRole(roleWithRights.Role); })">Remove</button></li>
                    </ul>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (_changeRightsWindowOpen)
{
    <div>
        <BaseTwoButtonsDialog
            Caption=@GetChangeRightsDialogCaption()
            OnClose="CancelChangeRights"
            YesButtonCaption="Save"
            NoButtonCaption="Cancel"
            OnSubmit="SubmitChangeRights">
            <table class="table">
                <thead>
                <tr>
                    <th>Right</th>
                    <th>Chosen</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var chosenRight in _chosenRights)
                {
                    <tr>
                        <td>@chosenRight.Right.Name</td>
                        <td>
                            <ul class="nav">
                                <li>
                                    <input type="checkbox" style="width: 40px" @bind="chosenRight.Chosen"/>
                                </li>
                            </ul>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </BaseTwoButtonsDialog>
    </div>
}

@if (_createRoleWindowOpen)
{
    <div>
        <BaseTwoButtonsDialog
            Caption="Create new role"
            OnClose="CancelCreateRole"
            YesButtonCaption="Save"
            NoButtonCaption="Cancel"
            OnSubmit="SubmitCreateRole">
            <ul class="nav">
                <li><span style="margin-left: 10px; vertical-align: center">Name : </span><input type="text" style="width: auto" @bind="_newRoleName"/></li>
            </ul>
        </BaseTwoButtonsDialog>
    </div>
}

@code {
    private List<RoleWithRights> _roles = new();
    private List<Right> _rights = new List<Right>();
    
    private bool _changeRightsWindowOpen = false;
    private RoleWithRights _changeRightsRoleTarget = new();
    private readonly List<ChosenRight> _chosenRights = new();

    private bool _createRoleWindowOpen = false;
    private string _newRoleName = string.Empty;

    protected override void OnInitialized()
    {
        RefreshData().GetAwaiter().GetResult();
        base.OnInitialized();
    }

    private async Task RefreshData()
    {
        _roles = await _credManagerEngine.GetRolesWithRights();
        _rights = await _credManagerEngine.GetRights();
        StateHasChanged();
    }

    private async Task RemoveRole(Role role)
    {
        await _credManagerEngine.RemoveRoleAsync(role.Id);
        await RefreshData();
    }

    private void ChangeRights(RoleWithRights roleWithRights)
    {
        _changeRightsWindowOpen = true;
        _changeRightsRoleTarget = roleWithRights;
        _chosenRights.AddRange(_rights.Select(e => new ChosenRight()
        {
            Right = e,
            Chosen = _changeRightsRoleTarget.Rights.Any(x => x.Id == e.Id)
        }));
        StateHasChanged();
    }
    
    private string GetChangeRightsDialogCaption()
    {
        return "Choose rights for " + _changeRightsRoleTarget.Role.Name;
    }

    private void CancelChangeRights()
    {
        _changeRightsWindowOpen = false;
        _changeRightsRoleTarget = new();
        _chosenRights.Clear();
        StateHasChanged();
    }

    private async Task SubmitChangeRights()
    {
        _changeRightsWindowOpen = false;
        StateHasChanged();
        
        await _credManagerEngine.SetupRightsAsync(_changeRightsRoleTarget.Role.Id, _chosenRights.Where(e => e.Chosen).Select(e => e.Right.Id).ToList());
        await RefreshData();
        CancelChangeRights();
    }
    private class ChosenRight
    {
        public Right Right { get; set; }
        public bool Chosen { get; set; }
    }

    private void CreateRole()
    {
        _createRoleWindowOpen = true;
        _newRoleName = string.Empty;
        
        StateHasChanged();
    }

    private void CancelCreateRole()
    {
        _createRoleWindowOpen = false;
        _newRoleName = string.Empty;
        
        StateHasChanged();
    }

    private async Task SubmitCreateRole()
    {
        _createRoleWindowOpen = false;
        StateHasChanged();

        await _credManagerEngine.CreateRoleAsync(_newRoleName);
        await RefreshData();
        CancelCreateRole();
    }
}